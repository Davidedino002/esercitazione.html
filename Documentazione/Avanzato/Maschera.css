/*La mask-imageproprietà CSS specifica un'immagine del livello maschera.*/
.mask1 {
    -webkit-mask-image: url(w3logo.png);
    mask-image: url(w3logo.png);
    mask-repeat: no-repeat;
  }
  
/*Clip Masking in CSS*/
/*Il clip masking in CSS è una tecnica che consente di ritagliare elementi
 utilizzando forme personalizzate, creando effetti visivi avanzati e creativi. 
 Utilizzando la proprietà clip-path, puoi definire un’area visibile specifica di un elemento, 
 nascondendo il resto. Questa tecnica è utile per creare design complessi e accattivanti, 
 senza bisogno di immagini di maschera o altre risorse esterne. 
 In questa guida, esploreremo come implementare il clip masking con clip-path, 
 con esempi pratici e best practices per ottimizzare il design delle tue pagine web.
 
 1. Cos’è clip-path?
 La proprietà clip-path in CSS consente di definire una regione di clipping per un elemento, 
 il che significa che solo la parte dell’elemento all’interno di questa regione sarà visibile. 
 Le aree al di fuori della regione definita verranno nascoste. 
 clip-path supporta una varietà di forme, inclusi rettangoli, cerchi, poligoni
e forme personalizzate definite con SVG.*/
.element {
  clip-path: shape(value);
}
/*1.2. Tipi di Forme Supportate
inset(): Ritaglia un rettangolo con opzioni per arrotondare gli angoli.
circle(): Ritaglia un cerchio.
ellipse(): Ritaglia un’ellisse.
polygon(): Ritaglia usando una forma definita da un insieme di punti.
path(): Ritaglia seguendo un percorso SVG, consentendo forme altamente personalizzate.

Esempi di Utilizzo
2.1. Ritagliare un Rettangolo
Utilizzando inset(), puoi ritagliare un elemento in un rettangolo, 
specificando i margini dai bordi del contenitore.*/

.clip-rectangle {
  width: 300px;
  height: 200px;
  background-color: #4caf50;
  clip-path: inset(20px 30px);
}

/*2.2. Creare un Cerchio
Con circle(), puoi ritagliare un elemento in una forma circolare, 
centrata o posizionata in un punto specifico.*/
.clip-circle {
  width: 200px;
  height: 200px;
  background-color: #2196f3;
  clip-path: circle(50%);
}

/*2.3. Creare un Poligono
La funzione polygon() ti consente di ritagliare un elemento utilizzando
 una forma personalizzata definita da un insieme di punti.*/
 .clip-polygon {
  width: 300px;
  height: 300px;
  background-color: #ff5722;
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
}


/*2.4. Ritagliare con un Percorso SVG
Con path(), puoi ritagliare un elemento seguendo un percorso SVG, 
consentendo la creazione di maschere molto complesse.*/
.clip-path {
  width: 300px;
  height: 300px;
  background-color: #9c27b0;
  clip-path: path("M150 0 L75 200 L225 200 Z");
}

/*3. Best Practices per l’Uso di clip-path
3.1. Utilizzo per Elementi Chiave
Utilizza clip-path per enfatizzare elementi chiave della tua interfaccia, 
come immagini di profilo, pulsanti call-to-action, o elementi decorativi.*/

/*3.2. Performance e Browser Support
La proprietà clip-path può influenzare le performance, 
soprattutto se usata su elementi complessi o su molti elementi contemporaneamente.
 Testa il layout su diversi browser e dispositivi per assicurarti che funzioni correttamente, 
 poiché il supporto per clip-path varia tra i browser.
 
 
 3.3. Considerazioni sull’Accessibilità
Assicurati che l’uso di clip-path non comprometta l’accessibilità del tuo sito.
 Ad esempio, gli screen reader potrebbero non interpretare correttamente contenuti ritagliati.
  Mantieni le informazioni chiave all’interno dell’area visibile e fornisci 
  alternative accessibili se necessario.
  
  
  3.4. Combinazione con Altre Proprietà CSS
Puoi combinare clip-path con altre proprietà CSS come transition, 
transform, o hover per creare animazioni e interazioni avanzate. 
Questo permette di rendere il tuo design ancora più dinamico e coinvolgente.*/
.clip-hover {
  width: 300px;
  height: 300px;
  background-color: #f44336;
  clip-path: circle(50%);
  transition: clip-path 0.3s ease-in-out;
}

.clip-hover:hover {
  clip-path: circle(30%);
}

